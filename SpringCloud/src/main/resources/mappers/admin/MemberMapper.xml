<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
CREATE TABLE IF NOT EXISTS `mydb`.`USER` (
  `Idx` INT NOT NULL AUTO_INCREMENT,
  `UserEmail` VARCHAR(45) NOT NULL ,
  `UserName` VARCHAR(45) NOT NULL,
  `UserPaasword` VARCHAR(45) NOT NULL,
  `createdAt` DATE NOT NULL,
  `updatedAt` DATE NULL,
  PRIMARY KEY (`Idx`),
  UNIQUE INDEX `UserEmail_UNIQUE` (`UserEmail` ASC) VISIBLE)
ENGINE = InnoDB;
--> 
<mapper namespace="com.iof.spring.admin.Mapper.member">
	
	<!-- Member Have All Result -->
	<!-- Site  -->
	<resultMap type="joinSite" id="JoinSiteResult">
		<id column="SiteId" property="id"/>
		<result column="SiteName" property="name"/>
		<result column="SiteCreatedAt" property="createdAt"/>
		<result column="SiteCreatedAt" property="createdAt"/>
	</resultMap>
	
	<!-- Plot -->
	<resultMap type="joinPlot" id="JoinPlotResult">
		<id column="PlotId" property="id"/>
		<result column="PlotName" property="name"/>
		<result column="PlotCreatedAt" property="createdAt"/>
		<result column="PlotCreatedAt" property="createdAt"/>
	</resultMap>
	<!-- Device -->
	<resultMap type="joinDevice" id="JoinDeviceResult">
		<id column="DeviceId" property="id"/>
		<result column="DeviceName" property="name"/>
		<result column="DeviceCreatedAt" property="createdAt"/>
		<result column="DeviceCreatedAt" property="createdAt"/>
	</resultMap>
	<!--  Get All Data Use UserName Users, Sites, Plots, Devices,  -->
 
	<resultMap type="joinUser" id="JoinAllUser">
		<id column="id" property="id"/>
		<result column="UserEmail" property="UserEmail"/>
		<result column="UserName" property="UserName"/>
		<result column="createdAt" property="createdAt"/>
		<result column="updatedAt" property="updatedAt"/>
		<!-- Property에는 위에 정의된 항목 중 선택 즉 위에는 현재 Site로 정의 되어 있음 ofType은 받을 형태의 정의  -->
		<collection property="Site" javaType="java.util.List" ofType="joinSite">
			<id column="siteId" property="id"/>
			<result column="siteName" property="name"/>
			<result column="siteCreatedAt" property="createdAt"/>
			<result column="siteUpdatedAt" property="updatedAt"/>
			<collection property="plot" javaType="java.util.List" ofType="joinPlot">
				<id column="plotId" property="id"/>
				<result column="plotName" property="PlotName"/>
				<result column="plotCreatedAt" property="createdAt"/>
				<result column="plotUpdatedAt" property="updatedAt"/>	
				<collection property="device" javaType="java.util.List" ofType="joinDevice">
					<id column="DeviceId" property="id"/>
					<result column="deviceName" property="name"/>
				</collection>
			</collection>
		</collection>
	</resultMap>
 
	<!-- Get All Info -->
	<select id="AdminDetailAllMember" parameterType="user" resultMap="JoinAllUser">
		SELECT 
			user.id,
			user.UserEmail,
			user.UserName,
			user.UserLevel,
			user.createdAt,
			user.updatedAt,
			site.id as siteId, 
			site.name AS siteName,
			site.createdAt AS siteCreatedAt,
			site.updatedAt AS siteUpdatedAt,
			plot.id AS plotId, 
			plot.PlotName AS plotName,
			plot.createdAt AS plotCreatedAt,
			plot.updatedAt AS plotUpdatedAt,
			device.id AS deviceId,
			device.name AS deviceName 
		FROM 
			users AS user 
		LEFT JOIN
			sites as site
		ON
			user.UserEmail=site.Owner
	</select>
	<!-- Return Map Setting Call resultMap -->
	<!-- 1 : 다 관계의 경우 데이터 매핑시켜준다. 
		association => 1 : 1 관계 
		collection => 1 : 다 관계 (한명의 유저가 작성한 글 목록)
		일반 컬럼과 pk 구분 가능 pk 칼럼에게는 result 아닌 id 사용
		need to primary key
	-->
	<!-- <association property="JoinSite"/> -->
	<resultMap type="joinUser" id="JoinUserResult">
		<id column="id" property="id" />
		<result column="UserEmail" property="UserEmail"/>
		<result column="UserName" property="UserName"/>
		<result column="UserLevel" property="UserLevel"/>
		<result column="createdAt" property="createdAt"/>
		<!-- Join site -->
		<collection property="Site" javaType="java.util.List" ofType="joinSite">
			<id column='siteId' property="id"/>
			<result column="siteName" property="name"/>
			<result column="siteCreatedAt" property="createdAt"/>
		</collection>
	</resultMap>
	
	<!--  Join User Site -->
	<select id="AdminDetailMember" parameterType="user" resultMap="JoinUserResult" >
		SELECT 
			user.id, 
			user.UserEmail, 
			user.UserName, 
			user.UserLevel, 
			user.createdAt,  
			<!-- GROUP_CONCAT(site.name) AS name -->
			site.id as siteId, 
			site.name as siteName, 
			site.createdAt as siteCreatedAt 
		FROM 
			users AS user 
		LEFT JOIN
			sites AS site 
		ON 
			user.UserEmail = site.Owner 
		WHERE user.id=#{id} 
	</select>
	
	<!-- Insert Member -->
	<insert id="AdminRegisteMember" parameterType="user">
		INSERT INTO users (
			id, 
			UserEmail, 
			UserName, 
			UserPassword, 
			UserLevel, 
			createdAt, 
			updatedAt
		) 
		VALUES (
			#{id}, 
			#{UserEmail}, 
			#{UserName}, 
			#{UserPassword}, 
			#{UserLevel}, 
			#{createdAt}, 
			#{updatedAt} 
		)
	</insert>
	
	<!-- Member Registe Check -->
	<select id="AdminFindEmailMember" parameterType="map" resultType="user">
		SELECT * 
		FROM users 
		WHERE UserEmail=#{Email}
	</select>
	
	<!-- Member Email Check -->
	<select id="AdminEmailCheckMember" parameterType="map" resultType="int">
		SELECT COUNT(id) 
		FROM users 
		WHERE UserEmail=#{email}
	</select>
	
	<!-- Member Find By UserEmail -->
	<select id="AdminFindByEmailMember" parameterType="user">
		SELECT * FROM users 
		WHERE UserEmail=#{UserEmail}
	</select>
	
	<!-- Update Member -->
	<update id="AdminUpdateMember" parameterType="user">
		UPDATE 
		users 
		SET UserEmail=#{UserEmail}, 
		UserName=#{UserName}, 
		UserLevel=#{UserLevel}, 
		UserPassword=#{UserPassword}, 
		updatedAt=#{updatedAt} 
		WHERE id=#{id}
	</update>
	
	<!-- Delete Member List -->
	<delete id="AdminDeleteMember" parameterType="map">
		DELETE FROM users 
		WHERE id IN
		<foreach collection="deleteId" item="item" open="(" close=");" separator=", ">
			#{item}
		</foreach>
	</delete>
	
	<!-- Count Member -->
	<select id="AdminCountMember" resultType="int">
		SELECT COUNT(id) 
		FROM users 
	</select>
	
	<!-- All Member List -->
	<select id="AdminListMember" parameterType="user" resultType="user">
		SELECT id, UserEmail, UserName, UserLevel, createdAt, updatedAt 
		FROM users ORDER BY id DESC
	</select>
	
	<!-- Paging Member -->
	<select id="AdminPagingMember" parameterType="map" resultType="user">
		SELECT id, UserEmail, UserName, UserLevel, createdAt, updatedAt 
		FROM users 
		ORDER BY id DESC 
		LIMIT 10 OFFSET #{page}
	</select>
	
	<!-- search Query -->
	<sql id="search">
		WHERE UserEmail LIKE CONCAT('%', #{keyword}, '%') 
		OR UserName LIKE CONCAT('%', #{keyword}, '%') 
		OR UserLevel LIKE CONCAT('%', #{keyword}, '%')
	</sql>

</mapper>