<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.iof.spring.admin.Mapper.member">
	<!-- Member Have All Result -->
	<!-- Site  -->
	<resultMap type="joinSite" id="JoinSiteResult">
		<result column="name" property="name"/>
		<result column="createdAt" property="createdAt"/>
	</resultMap>
	
	<!-- Plot -->
	<resultMap type="joinPlot" id="JoinPlotResult">
		
	</resultMap>
	<!-- Return Map Setting Call resultMap -->
	<!-- 1 : 다 관계의 경우 데이터 매핑시켜준다. 
		association => 1 : 1 관계 
		collection => 1 : 다 관계 (한명의 유저가 작성한 글 목록)
		일반 컬럼과 pk 구분 가능 pk 칼럼에게는 result 아닌 id 사용
		need to primary key
	-->
	<!-- <association property="JoinSite"/> -->
	<resultMap type="joinUser" id="JoinUserResult">
		<id column="id" property="id" />
		<result column="UserEmail" property="UserEmail"/>
		<result column="UserName" property="UserName"/>
		<result column="UserLevel" property="UserLevel"/>
		<result column="createdAt" property="createdAt"/>
		<!-- Join site -->
		<collection property="Site" javaType="java.util.List" ofType="joinSite">
			<id column='siteId' property="id"/>
			<result column="siteName" property="name"/>
			<result column="siteCreatedAt" property="createdAt"/>
		</collection>
	</resultMap>
	
	<!--  Join User Site -->
	<select id="AdminDetailMember" parameterType="user" resultMap="JoinUserResult" >
		SELECT 
			user.id, 
			user.UserEmail, 
			user.UserName, 
			user.UserLevel, 
			user.createdAt,  
			<!-- GROUP_CONCAT(site.name) AS name -->
			site.id as siteId, 
			site.name as siteName, 
			site.createdAt as siteCreatedAt 
		FROM 
			users AS user 
		LEFT JOIN
			sites AS site 
		ON 
			user.UserEmail = site.Owner 
		WHERE user.id=#{id} 
	</select>
	
	<!-- Insert Member -->
	<insert id="AdminRegisteMember" parameterType="user">
		INSERT INTO users (
			id, 
			UserEmail, 
			UserName, 
			UserPassword, 
			UserLevel, 
			createdAt, 
			updatedAt
		) 
		VALUES (
			#{id}, 
			#{UserEmail}, 
			#{UserName}, 
			#{UserPassword}, 
			#{UserLevel}, 
			#{createdAt}, 
			#{updatedAt} 
		)
	</insert>
	
	<!-- Member Registe Check -->
	<select id="AdminFindEmailMember" parameterType="map" resultType="user">
		SELECT * 
		FROM users 
		WHERE UserEmail=#{Email}
	</select>
	
	<!-- Member Email Check -->
	<select id="AdminEmailCheckMember" parameterType="map" resultType="int">
		SELECT COUNT(id) 
		FROM users 
		WHERE UserEmail=#{email}
	</select>
	
	<!-- Member Find By UserEmail -->
	<select id="AdminFindByEmailMember" parameterType="user">
		SELECT * FROM users 
		WHERE UserEmail=#{UserEmail}
	</select>
	
	<!-- Update Member -->
	<update id="AdminUpdateMember" parameterType="user">
		UPDATE 
		users 
		SET UserEmail=#{UserEmail}, 
		UserName=#{UserName}, 
		UserLevel=#{UserLevel}, 
		UserPassword=#{UserPassword}, 
		updatedAt=#{updatedAt} 
		WHERE id=#{id}
	</update>
	
	<!-- Delete Member -->
	<delete id="AdminDeleteMember" parameterType="user">
		DELETE FROM users 
		WHERE UserEmail=#{UserEmail}
	</delete>
	
	<!-- Count Member -->
	<select id="AdminCountMember" resultType="int">
		SELECT COUNT(id) 
		FROM users 
	</select>
	
	<!-- All Member List -->
	<select id="AdminListMember" parameterType="user" resultType="user">
		SELECT id, UserEmail, UserName, UserLevel, createdAt, updatedAt 
		FROM users ORDER BY id DESC
	</select>
	
	<!-- Paging Member -->
	<select id="AdminPagingMember" parameterType="map" resultType="user">
		SELECT id, UserEmail, UserName, UserLevel, createdAt, updatedAt 
		FROM users 
		ORDER BY id DESC 
		LIMIT 10 OFFSET #{page}
	</select>
	
	<!-- search Query -->
	<sql id="search">
		WHERE UserEmail LIKE CONCAT('%', #{keyword}, '%') 
		OR UserName LIKE CONCAT('%', #{keyword}, '%') 
		OR UserLevel LIKE CONCAT('%', #{keyword}, '%')
	</sql>

</mapper>